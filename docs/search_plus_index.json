{"./":{"url":"./","title":"简介","keywords":"","body":"简介Gitbook 环境配置安装golangcurl -sSL https://my5353.com/confgo | bash /dev/stdin 安装ohmyzshcurl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin 安装nerdfontcurl -sSL https://my5353.com/nerdfont | bash /dev/stdin 安装spacevimcurl -sSL https://my5353.com/spacevim | bash /dev/stdin Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 14:35:11 "},"config_env/":{"url":"config_env/","title":"配置环境","keywords":"","body":"Git使用技巧Git命令详解 Git学习游戏为每个项目单独设置用户名和邮箱git config --local user.name xxx git config --local user.email xxx # 查询 git config --local -l git删除全部提交历史，成为一个新的仓库#创建一个新的分支 git checkout --orphan latest_branch #添加所有文件 git add -A #提交更改 git commit -am \"commit\" #删除需要替换的分支 git branch -D master #重命名创建的分支为删除的分支 git branch -m master #强制提交到远程仓库 git push -f origin master git merge和git rebase#所在分支为master，带合并分支为devlop git merge devlop #所在分支为devlop，带变基分支为master git rebase master Git 同步上游分支代码#设置git同步快捷命令 alias.sync=!sh -c \"git pull && git fetch upstream && git checkout master && git merge upstream/master && git push origin master\" #执行同步命令 git sync Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-19 15:28:59 "},"config_env/vagrant.html":{"url":"config_env/vagrant.html","title":"Vagrant安装","keywords":"","body":"vagrant安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:36:06 "},"config_env/docker.html":{"url":"config_env/docker.html","title":"Docker安装","keywords":"","body":"Docker安装一键安装脚本curl -sSL https://get.daocloud.io/docker | sh 普通用户使用dockersudo groupadd docker # 创建docker组 sudo usermod -aG docker $USER # 加入当前用户到docker组 newgrp docker # 刷新docker组 # 普通用户测试使用docker docker run hello-world docker启动mysqldocker run -itd --name mysql_dev -p 3306:3306 \\ -v /home/mysql/data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ -d mysql:8.0 docker启动nginx创建挂载目录mkdir -p /data/docker/nginx/conf/vhost mkdir -p /data/docker/nginx/logs mkdir -p /data/docker/nginx/html mkdir -p /data/docker/nginx/ssl 配置nginx.conf# vi /data/docker/nginx/conf/nginx.conf user nobody; worker_processes 4; worker_cpu_affinity 0001 0010 0100 1000; worker_rlimit_core 768m; worker_rlimit_nofile 65536; events { worker_connections 65535; use epoll; epoll_events 1024; } http { include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\" $request_time ' '\"$host\" \"$upstream_addr\" \"$upstream_status\" \"$upstream_response_time\" ' access_log off; sendfile on; tcp_nopush on; tcp_nodelay on; server_names_hash_bucket_size 128; client_max_body_size 100m; client_body_buffer_size 1024k; client_header_timeout 250; max_ranges 10; send_timeout 450; keepalive_timeout 750; server_name_in_redirect off; server_tokens off; gzip on; gzip_buffers 4 16k; gzip_comp_level 9; gzip_http_version 1.0; gzip_min_length 800; gzip_proxied any; gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php image/jpeg image/gif image/png image/jpg; gzip_vary on; proxy_set_header Connection Keep-Alive; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; include /etc/nginx/conf.d/*.conf; } # vi /data/docker/nginx/conf/vhost/test.conf server { listen 80; server_name 192.168.60.21; # listen 443 ssl; # server_name www.test.com; # ssl_certificate /ssl/server.crt; # ssl_certificate_key /ssl/server.key; location / { root html; index index.html index.htm; } } 运行nginx容器docker run --restart=always --name=nginx -it -p 80:80 \\ -v /data/docker/nginx/conf/vhost:/etc/nginx/conf.d:rw \\ -v /data/docker/nginx/logs:/var/log/nginx:rw \\ -v /data/docker/nginx/conf/ngin.conf:/etc/nginx/nginx.conf:rw \\ -v /data/docker/nginx/html:/etc/nginx/html:rw \\ -d nginx:latest 配置ssl证书docker run --restart=always --name=nginx -it -p 80:80 -p 443:443 \\ -v /data/docker/nginx/conf/vhost:/etc/nginx/conf.d:rw \\ -v /data/docker/nginx/logs:/var/log/nginx:rw \\ -v /data/docker/nginx/conf/ngin.conf:/etc/nginx/nginx.conf:rw \\ -v /data/docker/nginx/html:/etc/nginx/html:rw \\ -v /data/docker/nginx/ssl:/ssl:rw \\ -d nginx:latest Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-28 20:27:43 "},"config_env/gitbook.html":{"url":"config_env/gitbook.html","title":"Gitbook安装","keywords":"","body":"Gitbook安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-03 17:22:33 "},"config_env/golang.html":{"url":"config_env/golang.html","title":"Golang安装","keywords":"","body":"Golang安装默认安装curl -sSL https://my5353.com/confgo | bash 使用帮助curl -sSL https://my5353.com/confgo | bash /dev/stdin -h 安装指定版本curl -sSL https://my5353.com/confgo | bash /dev/stdin -v \"1.18.6\" 清除已安装环境curl -sSL https://my5353.com/confgo | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Go Sdk In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-09 09:18:56 # @FilePath : /shell/config-dev-env/install_golang.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_golang_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable go_sdk_version=\"1.19.1\" go_sdk_package=\"go${go_sdk_version}.linux-amd64.tar.gz\" # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_go_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_golang.sh [-h -r] [-v version]\" echo \" -h : display this help and exit\" echo \" -v : input golang version default 1.19.1\" echo \" -r : remove golang env and exit\" exit 0 } # config files function config_profile() { print_color \"blue\" \"append go env to /etc/profile\" if [ \"$(grep -c \"GOROOT\" /etc/profile)\" -eq '0' ] then append_profile=\"sudo tee -a /etc/profile\" echo -e \"\\n#GOROOT PATH\\nexport GOROOT=/usr/local/go\" | $append_profile echo -e \"#GOHOME PATH\\nexport GOPATH=\\$HOME/go\" | $append_profile echo -e \"#GOBIN PATH\\nexport GOBIN=\\$GOPATH/bin\" | $append_profile echo -e \"\\nexport PATH=\\$PATH:\\$GOPATH:\\$GOBIN:\\$GOROOT/bin\" | $append_profile # shellcheck source=/dev/null source /etc/profile else print_color \"blue\" \"/etc/profile has been added!\" fi } # get golang sdk url function download_sdk_pkg() { mkdir -p \"${HOME}\"/tools print_color \"blue\" \"download golang sdk in ${HOME}/tools/\" if [ ! -f \"${HOME}\"/tools/\"${go_sdk_package}\" ] then wget -P \"${HOME}\"/tools https://gomirrors.org/dl/go/\"${go_sdk_package}\" fi } # unarchive sdk to dir function install_go_sdk() { if [ ! -d /usr/local/go\"${go_sdk_version}\" ] then sudo tar -zxf \"${HOME}\"/tools/\"${go_sdk_package}\" -C /usr/local/ print_color \"green\" \"unarchive_go_sdk executed successfully\" sudo mv /usr/local/go /usr/local/go\"${go_sdk_version}\" print_color \"blue\" \"unarchive golang sdk in /usr/local/\" else print_color \"blue\" \"/usr/local/go directory already exists\" sudo rm -rf /usr/local/go fi sudo ln -s /usr/local/go\"${go_sdk_version}\" /usr/local/go } # config go path env function config_go_env() { go env -w GO111MODULE=on && \\ go env -w GOPROXY=https://goproxy.cn,direct && \\ go env -w GOROOT=/usr/local/go && \\ go env -w GOBIN=\"${HOME}/go/bin\" && \\ go env -w GOPATH=\"${HOME}/go\" } # create go paht dir function create_go_path() { mkdir -p \"${HOME}\"/go/{bin,pkg,src} print_color \"blue\" \"create golang path in ${HOME}/go\" } # entry function function run_install_golang() { status_closure config_profile status_closure download_sdk_pkg status_closure install_go_sdk status_closure config_go_env status_closure create_go_path print_color \"green\" \"golang-${go_sdk_version} installation completed!\" print_color \"yellow\" \"exec \\\"source /etc/profile\\\" after installation completed !!!\" } # clean go env function clear_go_env() { sudo rm -rf \"${HOME}\"/go && \\ sudo rm -rf \"${HOME}\"/tools/go* && \\ sudo rm -rf /usr/local/go* && \\ sudo sed -i '/GOROOT/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOPATH/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOHOME/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOBIN/d' /etc/profile > /dev/null && \\ sudo sed -i ':n;/^\\n*$/{$! N;$d;bn}' /etc/profile print_color \"green\" \"golang env clear completed!\" } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ $# -ne 0 ] then case $1 in -h|help) help ;; -v|version) go_sdk_version=$2 go_sdk_package=go\"${go_sdk_version}\".linux-amd64.tar.gz status_closure run_install_golang ;; -r|remove) status_closure clear_go_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_golang fi } # run script main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 14:58:15 "},"config_env/nerdfont.html":{"url":"config_env/nerdfont.html","title":"NerdFont安装","keywords":"","body":"NerdFont安装默认安装curl -sSL https://my5353.com/nerdfont | bash 使用帮助curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -h 安装指定字体(仅限FiraCode DroidSansMono DejaVuSansMono CodeNewRoman)curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -o FiraCode DejaVuSansMono 清除已安装环境curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Nerd Font In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-09 08:18:18 # @FilePath : /shell/config-dev-env/install_nerd_fonts.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_nerdfont_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_nerd_fonts_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_nerd_font.sh [-h -r] [-o nerdfont-list]\" echo \" -h : display this help and exit\" echo \" -r : remove nerdfont env and exit\" echo \" -o : option nerdfont want to install(only in FiraCode DroidSansMono DejaVuSansMono CodeNewRoman)\" exit 1 } # install nerd fonts function install_nerd_fonts() { local fonts_arr local prefix_url local patched_fonts_dir prefix_url=\"https://gitea.com/neet11/config-dev-env/raw/branch/main/fonts/\" patched_fonts_dir=\"${HOME}/tools/patched-fonts/\" print_color \"green\" \"check whether unzip is installed and patched_fonts dir is created\" if [ ! \"$(which unzip)\" ]; then sudo apt -y install unzip; fi if [ ! -d \"${patched_fonts_dir}\" ]; then mkdir \"${patched_fonts_dir}\" ; fi if [ \"${#}\" -ne 0 ]; then fonts_arr=(\"${@}\") else fonts_arr=(FiraCode DroidSansMono DejaVuSansMono CodeNewRoman) fi print_color \"green\" \"install nerd fonts: ${fonts_arr[*]}\" for font in \"${fonts_arr[@]}\" do if [ ! -f \"${patched_fonts_dir}${font}.zip\" ] then wget -P \"${patched_fonts_dir}\" \"${prefix_url}${font}.zip\" print_color \"green\" \"unzip ${font}.zip\" unzip -d \"${patched_fonts_dir}\" \"${patched_fonts_dir}${font}.zip\" rm -rf \"${patched_fonts_dir}/LICENSE.txt\" rm -rf \"${patched_fonts_dir}/readme.md\" fi done if [ ! -f \"${HOME}/tools/install.sh\" ] then print_color \"green\" \"install nerd fonts install.sh\" wget -P \"${HOME}/tools/\" \"${prefix_url}\"install.sh fi bash \"${HOME}/tools/install.sh\" > /dev/null print_color \"blue\" \"fonts install to ${HOME}/.local/share/fonts/NerdFonts\" } # clear nerd fonts env function clear_nerd_fonts_env() { local nerd_fonts_home nerd_fonts_home=\"${HOME}/.local/share/fonts/NerdFonts\" print_color \"green\" \"remove the nerd fonts\" if [ -d \"${nerd_fonts_home}\" ] then sudo rm -rf \"${nerd_fonts_home}\" fi print_color \"green\" \"clear nerdfont succeeded\" } # entry function function run_install_nerdfont() { status_closure install_nerd_fonts } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -o|option) status_closure install_nerd_fonts \"${@:2}\" ;; -r|remove) status_closure clear_nerd_fonts_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_nerdfont fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-09 17:27:33 "},"config_env/nodejs.html":{"url":"config_env/nodejs.html","title":"NodeJs安装","keywords":"","body":"NodeJs安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-03 17:23:15 "},"config_env/nginx.html":{"url":"config_env/nginx.html","title":"Nginx安装","keywords":"","body":"Nginx安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-03 17:22:56 "},"config_env/ohmyzsh.html":{"url":"config_env/ohmyzsh.html","title":"OhMyZsh安装","keywords":"","body":"OhMyZsh安装默认安装curl -sSL https://my5353.com/ohmyzsh | bash 使用帮助curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -h 配置安装环境curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -c 查看版本信息curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -v 清除已安装环境curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Zsh In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-10 03:46:42 # @FilePath : /shell/config-dev-env/install_ohmyzsh.sh ### # set -o xtrace # Print commands and their arguments # set -o errexit # Exit on most errors (see the manual) # set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_zsh_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable user_name=\"$(whoami)\" # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_zsh_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_ohmyzsh.sh [-h -v -c -r]\" echo \" -h : display this help and exit\" echo \" -v : print zsh version and exit\" echo \" -c : config zsh env and exit\" echo \" -r : remove zsh env and exit\" exit 0 } # get user default shell function get_user_shell() { grep \"${user_name}\" /etc/passwd | awk -F: '{print $NF }' } # install oh my zsh function install_ohmyzsh() { # sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\" echo y | sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" } # check zsh is installed function check_zsh_install() { isInstall=$(grep -c zsh /etc/shells) if [ \"${isInstall}\" -eq 0 ] then print_color \"green\" \"start install zsh\" sudo apt-get -y install zsh # sudo yum -y install zsh status_closure set_default_shell \"/bin/zsh\" status_closure install_ohmyzsh else print_color \"green\" \"zsh has been installed\" print_color \"blue\" \"version: $(zsh --version)\" fi } # print zsh version function print_zsh_version() { if [ \"$(which zsh)\" ] then zsh --version else print_color \"red\" \"zsh has not been installed yet\" print_color \"red\" \"please install zsh first!\" fi } # set default shell function set_default_shell() { print_color \"green\" \"change ${user_name} default shell\" if [ \"$(get_user_shell)\" != \"${1}\" ];then sudo usermod -s \"${1}\" vagrant;fi print_color \"blue\" \"current shell: $(get_user_shell)\" print_color \"yellow\" \"shell change succeeded. please login again\" print_color \"green\" \"${user_name} default shell is ${1}\" } # config oh my zsh function config_oh_my_zsh() { local ZSH_CUSTOM ZSH_CUSTOM=\"${HOME}/.oh-my-zsh/custom\" if [ ! -d \"${ZSH_CUSTOM}/themes/spaceship-prompt\" ] then print_color \"green\" \"install zsh spaceship theme\" git clone https://github.com/spaceship-prompt/spaceship-prompt.git \"$ZSH_CUSTOM/themes/spaceship-prompt\" --depth=1 ln -s \"$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme\" \"$ZSH_CUSTOM/themes/spaceship.zsh-theme\" else print_color \"green\" \"zsh spaceship-prompt theme installed\" fi if [ ! -d \"${ZSH_CUSTOM}/plugins/zsh-autosuggestions\" ] then print_color \"green\" \"install zsh zsh-autosuggestions plugin\" git clone https://github.com/zsh-users/zsh-autosuggestions \"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}\"/plugins/zsh-autosuggestions else print_color \"green\" \"zsh zsh-autosuggestions plugin installed\" fi if [ ! -d \"${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting\" ] then print_color \"green\" \"install zsh zsh-syntax-highlighting plugin\" git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}\"/plugins/zsh-syntax-highlighting else print_color \"green\" \"zsh zsh-syntax-highlighting plugin installed\" fi print_color \"green\" \"config .zshrc\" if [ -f \"${HOME}/.zshrc\" ]; then rm -rf \"${HOME}/.zshrc\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.zshrc -P \"${HOME}/\" && chmod 644 \"${HOME}/.zshrc\" if [ -f \"${HOME}/.spacevimrc.zsh\" ]; then rm -rf \"${HOME}/.spacevimrc.zsh\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.spaceshiprc.zsh -P \"${HOME}/\" && chmod 644 \"${HOME}/.spaceshiprc.zsh\" print_color \"green\" \"zsh configfile .zshrc has been updated\" print_color \"yellow\" \"reload .zshrc use source ${HOME}/.zshrc\" } # clear zsh env function clear_zsh_env() { local uninstall_oh_my_zsh uninstall_oh_my_zsh=\"${HOME}/.oh-my-zsh/tools/uninstall.sh\" print_color \"green\" \"remove the oh my zsh\" if [ -f \"${uninstall_oh_my_zsh}\" ] then #sudo rm -rf ~/.zsh/zsh-autosuggestions echo y | bash \"${uninstall_oh_my_zsh}\" fi if [ -f \"${HOME}/.zshrc\" ] then sudo rm -rf \"${HOME}\"/.zshrc* fi print_color \"green\" \"remove the installed zsh\" sudo apt-get -y --purge autoremove zsh > /dev/null print_color \"green\" \"change default shell to bash\" if [ \"$(get_user_shell)\" != \"/bin/bash\" ] then status_closure set_default_shell \"/bin/bash\" else print_color \"blue\" \"current shell: $(get_user_shell)\" print_color \"yellow\" \"clear zsh succeeded. please login again\" fi } # entry function function run_install_zsh() { status_closure check_zsh_install } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -v|version) print_zsh_version ;; -r|remove) status_closure clear_zsh_env ;; -c|config) status_closure config_oh_my_zsh ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_zsh fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 11:14:23 "},"config_env/python.html":{"url":"config_env/python.html","title":"Python安装","keywords":"","body":"Python安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-03 17:23:37 "},"config_env/spacevim.html":{"url":"config_env/spacevim.html","title":"Spacevim安装","keywords":"","body":"Spacevim安装默认安装curl -sSL https://my5353.com/spacevim | bash 使用帮助curl -sSL https://my5353.com/spacevim | bash /dev/stdin -h 配置环境curl -sSL https://my5353.com/spacevim | bash /dev/stdin -c 清除已安装环境curl -sSL https://my5353.com/spacevim | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install SpaceVim In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-11 10:09:10 # @FilePath : /shell/config-dev-env/install_spacevim.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_spacevim_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_spacevim_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_spacevim.sh [-h -c -v -r]\" echo \" -h : display this help and exit\" echo \" -c : config spacevim and exit\" echo \" -v : show spacevim help and exit\" echo \" -r : remove sapcevim env and exit\" exit 0 } # install spacevim function install_spacevim() { # sh -c 'rm \"$(command -v 'starship')\"' # timedatectl set-timezone Asia/Shanghai # while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done& # watch -t -n1 \"date +%T|figlet\" print_color \"green\" \"install spacevim current env\" curl -sLf https://spacevim.org/cn/install.sh | bash } # config spacevim function config_spacevim_env() { print_color \"green\" \"config spacevim current env\" if [ -f \"${HOME}/.SpaceVim.d/init.toml\" ];then rm -rf \"${HOME}/.SpaceVim.d/init.toml\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.SpaceVim.d/init.toml -P \"${HOME}/.SpaceVim.d\" && \\ chmod 644 \"${HOME}/.SpaceVim.d/init.toml\" print_color \"yellow\" \"config succeeded, need reopen vim\" } # clear spacevim env function clear_spacevim_env() { print_color \"green\" \"clear spacevim current env\" curl -sLf https://spacevim.org/install.sh | bash -s -- --uninstall sudo rm -rf \"${HOME}/.SpaceVim\" sudo rm -rf \"${HOME}/.SpaceVim.d\" } # entry function function run_install_zsh() { status_closure install_spacevim } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -v|version) curl -sLf https://spacevim.org/install.sh | bash -s -- -h ;; -r|remove) status_closure clear_spacevim_env ;; -c|config) status_closure config_spacevim_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_zsh fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 10:48:21 "},"data_structure/":{"url":"data_structure/","title":"数据结构","keywords":"","body":"数据结构Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:36:50 "},"data_structure/python.html":{"url":"data_structure/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:57 "},"data_structure/golang.html":{"url":"data_structure/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:44 "},"design_pattern/":{"url":"design_pattern/","title":"设计模式","keywords":"","body":"设计模式Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:45:09 "},"design_pattern/python.html":{"url":"design_pattern/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:33 "},"design_pattern/golang.html":{"url":"design_pattern/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:24 "},"common_algorithms/":{"url":"common_algorithms/","title":"常用算法","keywords":"","body":"常用算法Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:44:54 "},"common_algorithms/python.html":{"url":"common_algorithms/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:05 "},"common_algorithms/golang.html":{"url":"common_algorithms/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:14 "},"end/":{"url":"end/","title":"结束","keywords":"","body":"结束wget https://wormhole.app/5LbYP#Zy0_sLPw-YD1gOa6g5vpUw Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-28 09:26:50 "}}