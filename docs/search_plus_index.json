{"./":{"url":"./","title":"简介","keywords":"","body":"简介Gitbook 环境配置安装golangcurl -sSL https://my5353.com/confgo | bash /dev/stdin 安装nodejscurl -sSL https://my5353.com/confnode | bash /dev/stdin 安装ohmyzshcurl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin 安装nerdfontcurl -sSL https://my5353.com/nerdfont | bash /dev/stdin 安装spacevimcurl -sSL https://my5353.com/spacevim | bash /dev/stdin Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-02 10:24:01 "},"config_env/":{"url":"config_env/","title":"配置环境","keywords":"","body":"Git使用技巧Git命令详解 Git学习游戏为每个项目单独设置用户名和邮箱git config --local user.name xxx git config --local user.email xxx # 查询 git config --local -l git删除全部提交历史，成为一个新的仓库#创建一个新的分支 git checkout --orphan latest_branch #添加所有文件 git add -A #提交更改 git commit -am \"commit\" #删除需要替换的分支 git branch -D master #重命名创建的分支为删除的分支 git branch -m master #强制提交到远程仓库 git push -f origin master git merge和git rebase#所在分支为master，待合并分支为devlop git merge devlop #所在分支为devlop，待变基分支为master git rebase master Git 同步上游分支代码#设置git同步快捷命令 alias.sync=!sh -c \"git pull && git fetch upstream && git checkout master && git merge upstream/master && git push origin master\" #执行同步命令 git sync Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 14:11:26 "},"config_env/vagrant.html":{"url":"config_env/vagrant.html","title":"Vagrant安装","keywords":"","body":"vagrant安装下载安装包vagranthttps://developer.hashicorp.com/vagrant/downloads 安装virtualboxvirtualboxhttps://www.virtualbox.org/wiki/Downloads 查找vagrant boxvagrantbox 安装对应虚拟机版本(virtualbox)https://app.vagrantup.com/boxes/search 添加vagrant box到本地# 添加本地下载box文件 vagrant box add centos7 H:\\VagrantBox\\centos7.box # 查看添加是否成功 vagrant box list 创建虚拟机创建存放Vagrantfile的文件夹：H:\\Vagrantfile\\centos7\\# 在vagrantfile文件夹下打开cmd执行如下命令 vagrant init centos7 # 启动虚拟机 vagrant up # 进入虚拟机 vagrant ssh 虚拟机的默认用户是vagrant/vagrant，root用户的密码是vagrant 。常用虚拟机管理命令参考文章启动虚拟机: vagrant up 登录虚拟机: vagrant ssh 重启虚拟机: vagrant reload 关闭虚拟机: vagrant halt 销毁虚拟机: vagrant destroy 示例VagrantfileVagrant.configure(\"2\") do |config| (1..4).each do |i| #定义节点变量 config.vm.define \"node#{i}\" do |node| # box配置 node.vm.box = \"centos7\" # 设置虚拟机的主机名 node.vm.hostname = \"node#{i}\" # 设置虚拟机的IP node.vm.network \"private_network\", ip: \"192.168.60.#{10+i}\" # 设置主机与虚拟机的共享目录 node.vm.synced_folder \"/Users/meetmax\", \"/home/vagrant/code\" # VirtaulBox相关配置 node.vm.provider \"virtualbox\" do |v| # 设置虚拟机的名称 v.name = \"node#{i}\" # 设置虚拟机的内存大小 v.memory = 2048 # 设置虚拟机的CPU个数 v.cpus = 1 end end end end Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-02 10:49:07 "},"config_env/docker.html":{"url":"config_env/docker.html","title":"Docker安装","keywords":"","body":"Docker安装一键安装脚本curl -sSL https://get.daocloud.io/docker | sh 普通用户使用dockersudo groupadd docker # 创建docker组 sudo usermod -aG docker $USER # 加入当前用户到docker组 newgrp docker # 刷新docker组 # 普通用户测试使用docker docker run hello-world docker启动mysqldocker run -itd --name mysql_dev -p 3306:3306 \\ -v /home/mysql/data:/var/lib/mysql \\ -e MYSQL_ROOT_PASSWORD=123456 \\ -d mysql:8.0 docker启动nginx创建挂载目录mkdir -p /data/docker/nginx/conf/vhost mkdir -p /data/docker/nginx/logs mkdir -p /data/docker/nginx/html mkdir -p /data/docker/nginx/ssl 配置nginx.conf# vi /data/docker/nginx/conf/nginx.conf user nginx; worker_processes 4; worker_cpu_affinity 0001 0010 0100 1000; worker_rlimit_core 768m; worker_rlimit_nofile 65536; events { worker_connections 65535; use epoll; epoll_events 1024; } http { include mime.types; default_type application/octet-stream; log_format main '$remote_addr - $remote_user [$time_local] \"$request\" ' '$status $body_bytes_sent \"$http_referer\" ' '\"$http_user_agent\" \"$http_x_forwarded_for\" $request_time ' '\"$host\" \"$upstream_addr\" \"$upstream_status\" \"$upstream_response_time\" ' access_log off; sendfile on; tcp_nopush on; tcp_nodelay on; server_names_hash_bucket_size 128; client_max_body_size 100m; client_body_buffer_size 1024k; client_header_timeout 250; max_ranges 10; send_timeout 450; keepalive_timeout 750; server_name_in_redirect off; server_tokens off; gzip on; gzip_buffers 4 16k; gzip_comp_level 9; gzip_http_version 1.0; gzip_min_length 800; gzip_proxied any; gzip_types text/plain application/x-javascript text/css text/javascript application/x-httpd-php image/jpeg image/gif image/png image/jpg; gzip_vary on; proxy_set_header Connection Keep-Alive; proxy_set_header Host $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; include /etc/nginx/conf.d/*.conf; } # vi /data/docker/nginx/conf/vhost/test.conf server { listen 80; server_name 192.168.60.21; # listen 443 ssl; # server_name www.test.com; # ssl_certificate /ssl/server.crt; # ssl_certificate_key /ssl/server.key; location / { root html; index index.html index.htm; } } 运行nginx容器docker run --restart=always --name=nginx -it -p 80:80 \\ -v /data/docker/nginx/conf/vhost:/etc/nginx/conf.d:rw \\ -v /data/docker/nginx/logs:/var/log/nginx:rw \\ -v /data/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:rw \\ -v /data/docker/nginx/html:/etc/nginx/html:rw \\ -d nginx:latest 配置ssl证书生成本地证书docker run --restart=always --name=nginx -it -p 80:80 -p 443:443 \\ -v /data/docker/nginx/conf/vhost:/etc/nginx/conf.d:rw \\ -v /data/docker/nginx/logs:/var/log/nginx:rw \\ -v /data/docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf:rw \\ -v /data/docker/nginx/html:/etc/nginx/html:rw \\ -v /data/docker/nginx/ssl:/ssl:rw \\ -d nginx:latest Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 11:21:00 "},"config_env/gitbook.html":{"url":"config_env/gitbook.html","title":"Gitbook安装","keywords":"","body":"Gitbook安装安装node.jsnode 版本cd /d c:\\opt wget -c https://my5353.com/nodejs start /wait node-v10.24.1-x64.msi /quiet 安装gitbookcd /d c:\\opt npm install gitbook-cli -g 查看gitBook版本c:\\opt>where node C:\\Program Files\\nodejs\\node.exe c:\\opt>node --version v10.24.1 c:\\opt>npm --version 6.14.12 c:\\opt>gitbook --version 3.2.3 gitbook初始化mkdir d:\\website\\www.mygitbook.cn\\wiki cd /d d:\\website\\www.mygitbook.cn\\wiki gitbook init 安装gitbook插件保存示例至根目录下book.json文件后执行gitbook install安装插件 { \"title\": \"notes\", \"description\": \"keep a record\", \"author\": \"someone\", \"output.name\": \"site\", \"language\": \"zh-hans\", \"gitbook\": \"3.2.0\", \"root\": \".\", \"links\": { \"sidebar\": { \"Home\": \"https://www.google.com\" } }, \"plugins\": [ \"-lunr\", \"-search\", \"-highlight\", \"-livereload\", \"hide-element\", \"search-plus@^0.0.11\", \"simple-page-toc@^0.1.1\", \"github@^2.0.0\", \"github-buttons@2.1.0\", \"edit-link@^2.0.2\", \"prism@^2.1.0\", \"prism-themes@^0.0.2\", \"advanced-emoji@^0.2.1\", \"anchors@^0.7.1\", \"include-codeblock@^3.0.2\", \"ace@^0.3.2\", \"emphasize@^1.1.0\", \"katex@^1.1.3\", \"splitter@^0.0.8\", \"mermaid-gb3@2.1.0\", \"tbfed-pagefooter@^0.0.1\", \"expandable-chapters-small@^0.1.7\", \"sectionx@^3.1.0\", \"anchor-navigation-ex@0.1.8\", \"favicon@^0.0.2\", \"terminal@^0.3.2\", \"alerts@^0.2.0\", \"include-csv@^0.1.0\", \"puml@^1.0.1\", \"musicxml@^1.0.2\", \"klipse@^1.2.0\", \"versions-select@^0.1.1\", \"-sharing\", \"graph@^0.1.0\", \"chart@^0.2.0\", \"code\", \"accordion\", \"sectionx\", \"expandable-chapters-small\" ], \"pluginsConfig\": { \"hide-element\": { \"elements\": [\".gitbook-link\"] }, \"theme-default\": { \"showLevel\": true }, \"prism\": { \"css\": [ \"prism-themes/themes/prism-base16-ateliersulphurpool.light.css\" ] }, \"github\": { \"url\": \"https://github.com/---\" }, \"github-buttons\": { \"repo\": \"xxx/xxx\", \"types\": [ \"star\" ], \"size\": \"small\" }, \"tbfed-pagefooter\": { \"copyright\": \"Copyright © someone 2022\", \"modify_label\": \"Latest modification time:\", \"modify_format\": \"YYYY-MM-DD HH:mm:ss\" }, \"simple-page-toc\": { \"maxDepth\": 3, \"skipFirstH1\": true }, \"edit-link\": { \"base\": \"https://github.com/---/blob/master\", \"label\": \"Edit This Page\" }, \"anchor-navigation-ex\": { \"isRewritePageTitle\": false, \"tocLevel1Icon\": \"fa fa-hand-o-right\", \"tocLevel2Icon\": \"fa fa-hand-o-right\", \"tocLevel3Icon\": \"fa fa-hand-o-right\" }, \"sectionx\": { \"tag\": \"b\" }, \"favicon\": { \"shortcut\": \"favicon.ico\", \"bookmark\": \"favicon.ico\" }, \"terminal\": { \"copyButtons\": true, \"fade\": false, \"style\": \"flat\" }, \"code\": { \"copyButtons\": true } } } gitbook卸载npm uninstall -g gitbook npm uninstall -g gitbook-cli npm cache clean -f gitbook常用命令# help gitbook help # setup and create files for chapters gitbook init # serve the book as a website for testing gitbook serve # install all plugins dependencies gitbook install # build a book(output _book/) gitbook build Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 12:26:27 "},"config_env/golang.html":{"url":"config_env/golang.html","title":"Golang安装","keywords":"","body":"Golang安装默认安装curl -sSL https://my5353.com/confgo | bash 使用帮助curl -sSL https://my5353.com/confgo | bash /dev/stdin -h 安装指定版本curl -sSL https://my5353.com/confgo | bash /dev/stdin -v \"1.18.6\" 清除已安装环境curl -sSL https://my5353.com/confgo | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Go Sdk In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-09 09:18:56 # @FilePath : /shell/config-dev-env/install_golang.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_golang_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable go_sdk_version=\"1.19.1\" go_sdk_package=\"go${go_sdk_version}.linux-amd64.tar.gz\" # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_go_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_golang.sh [-h -r] [-v version]\" echo \" -h : display this help and exit\" echo \" -v : input golang version default 1.19.1\" echo \" -r : remove golang env and exit\" exit 0 } # config files function config_profile() { print_color \"blue\" \"append go env to /etc/profile\" if [ \"$(grep -c \"GOROOT\" /etc/profile)\" -eq '0' ] then append_profile=\"sudo tee -a /etc/profile\" echo -e \"\\n#GOROOT PATH\\nexport GOROOT=/usr/local/go\" | $append_profile echo -e \"#GOHOME PATH\\nexport GOPATH=\\$HOME/go\" | $append_profile echo -e \"#GOBIN PATH\\nexport GOBIN=\\$GOPATH/bin\" | $append_profile echo -e \"\\nexport PATH=\\$PATH:\\$GOPATH:\\$GOBIN:\\$GOROOT/bin\" | $append_profile # shellcheck source=/dev/null source /etc/profile else print_color \"blue\" \"/etc/profile has been added!\" fi } # get golang sdk url function download_sdk_pkg() { mkdir -p \"${HOME}\"/tools print_color \"blue\" \"download golang sdk in ${HOME}/tools/\" if [ ! -f \"${HOME}\"/tools/\"${go_sdk_package}\" ] then wget -P \"${HOME}\"/tools https://gomirrors.org/dl/go/\"${go_sdk_package}\" fi } # unarchive sdk to dir function install_go_sdk() { if [ ! -d /usr/local/go\"${go_sdk_version}\" ] then sudo tar -zxf \"${HOME}\"/tools/\"${go_sdk_package}\" -C /usr/local/ print_color \"green\" \"unarchive_go_sdk executed successfully\" sudo mv /usr/local/go /usr/local/go\"${go_sdk_version}\" print_color \"blue\" \"unarchive golang sdk in /usr/local/\" else print_color \"blue\" \"/usr/local/go directory already exists\" sudo rm -rf /usr/local/go fi sudo ln -s /usr/local/go\"${go_sdk_version}\" /usr/local/go } # config go path env function config_go_env() { go env -w GO111MODULE=on && \\ go env -w GOPROXY=https://goproxy.cn,direct && \\ go env -w GOROOT=/usr/local/go && \\ go env -w GOBIN=\"${HOME}/go/bin\" && \\ go env -w GOPATH=\"${HOME}/go\" } # create go paht dir function create_go_path() { mkdir -p \"${HOME}\"/go/{bin,pkg,src} print_color \"blue\" \"create golang path in ${HOME}/go\" } # entry function function run_install_golang() { status_closure config_profile status_closure download_sdk_pkg status_closure install_go_sdk status_closure config_go_env status_closure create_go_path print_color \"green\" \"golang-${go_sdk_version} installation completed!\" print_color \"yellow\" \"exec \\\"source /etc/profile\\\" after installation completed !!!\" } # clean go env function clear_go_env() { sudo rm -rf \"${HOME}\"/go && \\ sudo rm -rf \"${HOME}\"/tools/go* && \\ sudo rm -rf /usr/local/go* && \\ sudo sed -i '/GOROOT/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOPATH/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOHOME/d' /etc/profile > /dev/null && \\ sudo sed -i '/GOBIN/d' /etc/profile > /dev/null && \\ sudo sed -i ':n;/^\\n*$/{$! N;$d;bn}' /etc/profile print_color \"green\" \"golang env clear completed!\" } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ $# -ne 0 ] then case $1 in -h|help) help ;; -v|version) go_sdk_version=$2 go_sdk_package=go\"${go_sdk_version}\".linux-amd64.tar.gz status_closure run_install_golang ;; -r|remove) status_closure clear_go_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_golang fi } # run script main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 14:58:15 "},"config_env/nerdfont.html":{"url":"config_env/nerdfont.html","title":"NerdFont安装","keywords":"","body":"NerdFont安装默认安装curl -sSL https://my5353.com/nerdfont | bash 使用帮助curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -h 安装指定字体(仅限FiraCode DroidSansMono DejaVuSansMono CodeNewRoman)curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -o FiraCode DejaVuSansMono 清除已安装环境curl -sSL https://my5353.com/nerdfont | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Nerd Font In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-09 08:18:18 # @FilePath : /shell/config-dev-env/install_nerd_fonts.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_nerdfont_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_nerd_fonts_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_nerd_font.sh [-h -r] [-o nerdfont-list]\" echo \" -h : display this help and exit\" echo \" -r : remove nerdfont env and exit\" echo \" -o : option nerdfont want to install(only in FiraCode DroidSansMono DejaVuSansMono CodeNewRoman)\" exit 1 } # install nerd fonts function install_nerd_fonts() { local fonts_arr local prefix_url local patched_fonts_dir prefix_url=\"https://gitea.com/neet11/config-dev-env/raw/branch/main/fonts/\" patched_fonts_dir=\"${HOME}/tools/patched-fonts/\" print_color \"green\" \"check whether unzip is installed and patched_fonts dir is created\" if [ ! \"$(which unzip)\" ]; then sudo apt -y install unzip; fi if [ ! -d \"${patched_fonts_dir}\" ]; then mkdir \"${patched_fonts_dir}\" ; fi if [ \"${#}\" -ne 0 ]; then fonts_arr=(\"${@}\") else fonts_arr=(FiraCode DroidSansMono DejaVuSansMono CodeNewRoman) fi print_color \"green\" \"install nerd fonts: ${fonts_arr[*]}\" for font in \"${fonts_arr[@]}\" do if [ ! -f \"${patched_fonts_dir}${font}.zip\" ] then wget -P \"${patched_fonts_dir}\" \"${prefix_url}${font}.zip\" print_color \"green\" \"unzip ${font}.zip\" unzip -d \"${patched_fonts_dir}\" \"${patched_fonts_dir}${font}.zip\" rm -rf \"${patched_fonts_dir}/LICENSE.txt\" rm -rf \"${patched_fonts_dir}/readme.md\" fi done if [ ! -f \"${HOME}/tools/install.sh\" ] then print_color \"green\" \"install nerd fonts install.sh\" wget -P \"${HOME}/tools/\" \"${prefix_url}\"install.sh fi bash \"${HOME}/tools/install.sh\" > /dev/null print_color \"blue\" \"fonts install to ${HOME}/.local/share/fonts/NerdFonts\" } # clear nerd fonts env function clear_nerd_fonts_env() { local nerd_fonts_home nerd_fonts_home=\"${HOME}/.local/share/fonts/NerdFonts\" print_color \"green\" \"remove the nerd fonts\" if [ -d \"${nerd_fonts_home}\" ] then sudo rm -rf \"${nerd_fonts_home}\" fi print_color \"green\" \"clear nerdfont succeeded\" } # entry function function run_install_nerdfont() { status_closure install_nerd_fonts } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -o|option) status_closure install_nerd_fonts \"${@:2}\" ;; -r|remove) status_closure clear_nerd_fonts_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_nerdfont fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-09 17:27:33 "},"config_env/nodejs.html":{"url":"config_env/nodejs.html","title":"NodeJs安装","keywords":"","body":"NodeJs安装默认安装curl -sSL https://my5353.com/confnode | bash 使用帮助curl -sSL https://my5353.com/confnode | bash /dev/stdin -h 安装指定版本curl -sSL https://my5353.com/confnode | bash /dev/stdin -v \"v16.17.1\" 清除已安装环境curl -sSL https://my5353.com/confnode | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install NodeJs In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-09 10:18:58 # @FilePath : /shell/config-dev-env/install_nodejs.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_nodejs_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable nodejs_version=\"v18.12.0\" nodejs_package=\"node-${nodejs_version}-linux-x64.tar.xz\" nodejs_dir=\"node-${nodejs_version}-linux-x64\" # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_go_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_nodejs.sh [-h -r] [-v version]\" echo \" -h : display this help and exit\" echo \" -v : input nodejs version default v18.12.0\" echo \" -r : remove nodejs env and exit\" exit 0 } # download node pkg function download_node_pkg() { mkdir -p \"${HOME}\"/tools print_color \"blue\" \"download nodejs pkg in ${HOME}/tools/\" if [ ! -f \"${HOME}\"/tools/\"${nodejs_package}\" ] then wget -P \"${HOME}\"/tools https://nodejs.org/dist/\"${nodejs_version}\"/\"${nodejs_package}\" fi } # unarchive nodejs pkg to dir function install_node_pkg() { if [ ! -d /usr/local/\"${nodejs_dir}\" ] then sudo tar -xf \"${HOME}\"/tools/\"${nodejs_package}\" -C /usr/local/ print_color \"green\" \"unarchive_node_pkg executed successfully\" else print_color \"blue\" \"/usr/local/node directory already exists\" if [ -d /usr/local/node ] then sudo rm -rf /usr/local/node fi fi sudo ln -s /usr/local/\"${nodejs_dir}\" /usr/local/node sudo ln -s /usr/local/node/bin/npm /usr/local/bin/ sudo ln -s /usr/local/node/bin/node /usr/local/bin/ } # create node paht dir function create_node_path() { if [ ! -d \"${HOME}\"/node/ ] then mkdir -p \"${HOME}\"/node/ print_color \"blue\" \"create node path in ${HOME}/node/\" fi } # entry function function run_install_node() { status_closure download_node_pkg status_closure install_node_pkg status_closure create_node_path print_color \"green\" \"node-${nodejs_version} installation completed!\" print_color \"yellow\" \"exec node -v and npm -v after installation completed !!!\" print_color \"green\" \"node -v:\" && node -v print_color \"green\" \"npm -v:\" && npm -v } # clean node env function clear_node_env() { sudo rm -rf \"${HOME}\"/node && \\ sudo rm -rf \"${HOME}\"/tools/node* && \\ sudo rm -rf /usr/local/node* && \\ sudo rm -rf /usr/local/bin/node && \\ sudo rm -rf /usr/local/bin/npm && \\ print_color \"green\" \"node env clear completed!\" } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ $# -ne 0 ] then case $1 in -h|help) help ;; -v|version) nodejs_version=$2 nodejs_package=\"node-${nodejs_version}-linux-x64.tar.xz\" nodejs_dir=\"node-${nodejs_version}-linux-x64\" status_closure run_install_node ;; -r|remove) status_closure clear_node_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_node fi } # run script main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-02 10:31:51 "},"config_env/nginx.html":{"url":"config_env/nginx.html","title":"Nginx安装","keywords":"","body":"Nginx安装docker安装nginxNginx 极简教程在线阅读本地创建ssl证书工具--mkcerthttps://github.com/FiloSottile/mkcert源码安装git clone https://github.com/FiloSottile/mkcert && cd mkcert go build -ldflags \"-X main.Version=$(git describe --tags)\" 创建证书示例$ mkcert -install Created a new local CA 💥 The local CA is now installed in the system trust store! ⚡️ The local CA is now installed in the Firefox trust store (requires browser restart)! 🦊 $ mkcert example.com \"*.example.com\" example.test localhost 127.0.0.1 ::1 Created a new certificate valid for the following names 📜 - \"example.com\" - \"*.example.com\" - \"example.test\" - \"localhost\" - \"127.0.0.1\" - \"::1\" The certificate is at \"./example.com+5.pem\" and the key at \"./example.com+5-key.pem\" ✅ nginx配置证书ssl_certificate /usr/local/etc/nginx/ssl/example.com+5.pem; ssl_certificate_key /usr/local/etc/nginx/ssl/example.com+5-key.pem; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES2 nginx配置重载nginx -t && nginx -s reload Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 11:51:06 "},"config_env/ohmyzsh.html":{"url":"config_env/ohmyzsh.html","title":"OhMyZsh安装","keywords":"","body":"OhMyZsh安装默认安装curl -sSL https://my5353.com/ohmyzsh | bash 使用帮助curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -h 配置安装环境curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -c 查看版本信息curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -v 清除已安装环境curl -sSL https://my5353.com/ohmyzsh | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install Zsh In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-10 03:46:42 # @FilePath : /shell/config-dev-env/install_ohmyzsh.sh ### # set -o xtrace # Print commands and their arguments # set -o errexit # Exit on most errors (see the manual) # set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_zsh_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable user_name=\"$(whoami)\" # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_zsh_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_ohmyzsh.sh [-h -v -c -r]\" echo \" -h : display this help and exit\" echo \" -v : print zsh version and exit\" echo \" -c : config zsh env and exit\" echo \" -r : remove zsh env and exit\" exit 0 } # get user default shell function get_user_shell() { grep \"${user_name}\" /etc/passwd | awk -F: '{print $NF }' } # install oh my zsh function install_ohmyzsh() { # sh -c \"$(curl -fsSL https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh)\" echo y | sh -c \"$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)\" } # check zsh is installed function check_zsh_install() { isInstall=$(grep -c zsh /etc/shells) if [ \"${isInstall}\" -eq 0 ] then print_color \"green\" \"start install zsh\" sudo apt-get -y install zsh # sudo yum -y install zsh status_closure set_default_shell \"/bin/zsh\" status_closure install_ohmyzsh else print_color \"green\" \"zsh has been installed\" print_color \"blue\" \"version: $(zsh --version)\" fi } # print zsh version function print_zsh_version() { if [ \"$(which zsh)\" ] then zsh --version else print_color \"red\" \"zsh has not been installed yet\" print_color \"red\" \"please install zsh first!\" fi } # set default shell function set_default_shell() { print_color \"green\" \"change ${user_name} default shell\" if [ \"$(get_user_shell)\" != \"${1}\" ];then sudo usermod -s \"${1}\" vagrant;fi print_color \"blue\" \"current shell: $(get_user_shell)\" print_color \"yellow\" \"shell change succeeded. please login again\" print_color \"green\" \"${user_name} default shell is ${1}\" } # config oh my zsh function config_oh_my_zsh() { local ZSH_CUSTOM ZSH_CUSTOM=\"${HOME}/.oh-my-zsh/custom\" if [ ! -d \"${ZSH_CUSTOM}/themes/spaceship-prompt\" ] then print_color \"green\" \"install zsh spaceship theme\" git clone https://github.com/spaceship-prompt/spaceship-prompt.git \"$ZSH_CUSTOM/themes/spaceship-prompt\" --depth=1 ln -s \"$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme\" \"$ZSH_CUSTOM/themes/spaceship.zsh-theme\" else print_color \"green\" \"zsh spaceship-prompt theme installed\" fi if [ ! -d \"${ZSH_CUSTOM}/plugins/zsh-autosuggestions\" ] then print_color \"green\" \"install zsh zsh-autosuggestions plugin\" git clone https://github.com/zsh-users/zsh-autosuggestions \"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}\"/plugins/zsh-autosuggestions else print_color \"green\" \"zsh zsh-autosuggestions plugin installed\" fi if [ ! -d \"${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting\" ] then print_color \"green\" \"install zsh zsh-syntax-highlighting plugin\" git clone https://github.com/zsh-users/zsh-syntax-highlighting.git \"${ZSH_CUSTOM:-~/.oh-my-zsh/custom}\"/plugins/zsh-syntax-highlighting else print_color \"green\" \"zsh zsh-syntax-highlighting plugin installed\" fi print_color \"green\" \"config .zshrc\" if [ -f \"${HOME}/.zshrc\" ]; then rm -rf \"${HOME}/.zshrc\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.zshrc -P \"${HOME}/\" && chmod 644 \"${HOME}/.zshrc\" if [ -f \"${HOME}/.spacevimrc.zsh\" ]; then rm -rf \"${HOME}/.spacevimrc.zsh\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.spaceshiprc.zsh -P \"${HOME}/\" && chmod 644 \"${HOME}/.spaceshiprc.zsh\" print_color \"green\" \"zsh configfile .zshrc has been updated\" print_color \"yellow\" \"reload .zshrc use source ${HOME}/.zshrc\" } # clear zsh env function clear_zsh_env() { local uninstall_oh_my_zsh uninstall_oh_my_zsh=\"${HOME}/.oh-my-zsh/tools/uninstall.sh\" print_color \"green\" \"remove the oh my zsh\" if [ -f \"${uninstall_oh_my_zsh}\" ] then #sudo rm -rf ~/.zsh/zsh-autosuggestions echo y | bash \"${uninstall_oh_my_zsh}\" fi if [ -f \"${HOME}/.zshrc\" ] then sudo rm -rf \"${HOME}\"/.zshrc* fi print_color \"green\" \"remove the installed zsh\" sudo apt-get -y --purge autoremove zsh > /dev/null print_color \"green\" \"change default shell to bash\" if [ \"$(get_user_shell)\" != \"/bin/bash\" ] then status_closure set_default_shell \"/bin/bash\" else print_color \"blue\" \"current shell: $(get_user_shell)\" print_color \"yellow\" \"clear zsh succeeded. please login again\" fi } # entry function function run_install_zsh() { status_closure check_zsh_install } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -v|version) print_zsh_version ;; -r|remove) status_closure clear_zsh_env ;; -c|config) status_closure config_oh_my_zsh ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_zsh fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-14 11:14:23 "},"config_env/python.html":{"url":"config_env/python.html","title":"Python安装","keywords":"","body":"Python安装Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-03 17:23:37 "},"config_env/spacevim.html":{"url":"config_env/spacevim.html","title":"Spacevim安装","keywords":"","body":"Spacevim安装默认安装curl -sSL https://my5353.com/spacevim | bash 使用帮助curl -sSL https://my5353.com/spacevim | bash /dev/stdin -h 配置环境curl -sSL https://my5353.com/spacevim | bash /dev/stdin -c 清除已安装环境curl -sSL https://my5353.com/spacevim | bash /dev/stdin -r 完整脚本 #!/usr/bin/env bash ### # @Descripttion : Install SpaceVim In Linux # @version : v1.0.0 # @Author : neet11 neetwy@163.com # @Date : 2022-09-27 03:01:36 # @LastEditors : neet11 neetwy@163.com # @LastEditTime : 2022-10-11 10:09:10 # @FilePath : /shell/config-dev-env/install_spacevim.sh ### #set -o xtrace # Print commands and their arguments set -o errexit # Exit on most errors (see the manual) set -o errtrace # Make sure any error trap is inherited set -o nounset # Disallow expansion of unset variables set -o pipefail # Use last non-zero exit code in a pipeline # global constant TAG=\"CMD\" # LOG_PATH=$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd )/logs LOG_PATH=\"/tmp/shell/logs\" LOG_FILE=\"${LOG_PATH}/install_spacevim_$(date +\"%Y%m%d\").log\" HIDE_LOG=true # global environment variable # log handler function log() { [ ! -d \"${LOG_PATH}\" ] && mkdir -p \"${LOG_PATH}\" if [ $HIDE_LOG ]; then echo -e \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" >> \"${LOG_FILE}\" else echo \"[$(date +\"%Y/%m/%d:%H:%M:%S %z\")] [$(whoami)] [$TAG]\" \"${@}\" | tee -a \"${LOG_FILE}\" fi } # trap err signal function script_trap_err() { local exit_code=1 # Disable the error trap handler to prevent potential recursion trap - ERR # Consider any further errors non-fatal to ensure we run to completion set +o errexit set +o pipefail log \"[E] ERROR\" \"${@}\" status_closure clear_spacevim_env exit \"$exit_code\" } # trap exit signal function script_trap_exit() { log \"[I] shell exec done.\" } # define:info(32green) warn(31red) process(33yellow) function print_color () { case $1 in red) echo -e \"\\033[31m$2 \\033[0m\" ;; green) echo -e \"\\033[32m$2 \\033[0m\" ;; yellow) echo -e \"\\033[33m$2 \\033[0m\" ;; blue) echo -e \"\\033[34m$2 \\033[0m\" ;; *) echo -e \"\\033[31m[Color Error]$2 \\033[0m\" ;; esac } # check the command execution status function status_closure () { print_color \"green\" \"${1}\" eval \"${*}\" print_color \"green\" \"${1} executed successfully\" } # show help info function help() { echo \"Usage: ./install_spacevim.sh [-h -c -v -r]\" echo \" -h : display this help and exit\" echo \" -c : config spacevim and exit\" echo \" -v : show spacevim help and exit\" echo \" -r : remove sapcevim env and exit\" exit 0 } # install spacevim function install_spacevim() { # sh -c 'rm \"$(command -v 'starship')\"' # timedatectl set-timezone Asia/Shanghai # while sleep 1;do tput sc;tput cup 0 $(($(tput cols)-29));date;tput rc;done& # watch -t -n1 \"date +%T|figlet\" print_color \"green\" \"install spacevim current env\" curl -sLf https://spacevim.org/cn/install.sh | bash } # config spacevim function config_spacevim_env() { print_color \"green\" \"config spacevim current env\" if [ -f \"${HOME}/.SpaceVim.d/init.toml\" ];then rm -rf \"${HOME}/.SpaceVim.d/init.toml\"; fi wget https://gitea.com/neet11/config-dev-env/raw/branch/main/.SpaceVim.d/init.toml -P \"${HOME}/.SpaceVim.d\" && \\ chmod 644 \"${HOME}/.SpaceVim.d/init.toml\" print_color \"yellow\" \"config succeeded, need reopen vim\" } # clear spacevim env function clear_spacevim_env() { print_color \"green\" \"clear spacevim current env\" curl -sLf https://spacevim.org/install.sh | bash -s -- --uninstall sudo rm -rf \"${HOME}/.SpaceVim\" sudo rm -rf \"${HOME}/.SpaceVim.d\" } # entry function function run_install_zsh() { status_closure install_spacevim } function main() { trap script_trap_err INT TERM QUIT HUP ERR trap script_trap_exit EXIT log \"[I] shell start\" if [ \"${#}\" -ne 0 ] then case $1 in -h|help) help ;; -v|version) curl -sLf https://spacevim.org/install.sh | bash -s -- -h ;; -r|remove) status_closure clear_spacevim_env ;; -c|config) status_closure config_spacevim_env ;; *) print_color \"red\" \"unknown parameter\" && help ;; esac else status_closure run_install_zsh fi } main \"${@}\" Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-02 10:33:28 "},"data_structure/":{"url":"data_structure/","title":"数据结构","keywords":"","body":"数据结构Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:36:50 "},"data_structure/python.html":{"url":"data_structure/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:57 "},"data_structure/golang.html":{"url":"data_structure/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:44 "},"data_structure/shell.html":{"url":"data_structure/shell.html","title":"Shell实现","keywords":"","body":"ShellCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-02 16:37:27 "},"design_pattern/":{"url":"design_pattern/","title":"设计模式","keywords":"","body":"设计模式Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:45:09 "},"design_pattern/python.html":{"url":"design_pattern/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:33 "},"design_pattern/golang.html":{"url":"design_pattern/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:24 "},"design_pattern/shell.html":{"url":"design_pattern/shell.html","title":"Shell实现","keywords":"","body":"ShellCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 12:30:22 "},"common_algorithms/":{"url":"common_algorithms/","title":"常用算法","keywords":"","body":"常用算法Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:44:54 "},"common_algorithms/python.html":{"url":"common_algorithms/python.html","title":"Python实现","keywords":"","body":"PythonCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:05 "},"common_algorithms/golang.html":{"url":"common_algorithms/golang.html","title":"Golang实现","keywords":"","body":"GolangCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-10-12 10:46:14 "},"common_algorithms/shell.html":{"url":"common_algorithms/shell.html","title":"Shell实现","keywords":"","body":"ShellCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-01 12:28:47 "},"other/":{"url":"other/","title":"其他","keywords":"","body":"结束ops book在线访问地址markdown Emoji在线访问地址google code style在线访问地址大文件在线传输工具在线访问地址vim常用操作映射normal模式下Esc快捷键vim ~/.vimrc imap jk source ~/.vimrc Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 10:57:09 "},"other/linux/command.html":{"url":"other/linux/command.html","title":"command笔记","keywords":"","body":"Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:07:32 "},"other/linux/script.html":{"url":"other/linux/script.html","title":"shell笔记","keywords":"","body":"Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:07:52 "},"other/network/":{"url":"other/network/","title":"network笔记","keywords":"","body":"networkCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:20:14 "},"other/network/http.html":{"url":"other/network/http.html","title":"http笔记","keywords":"","body":"Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:08:11 "},"other/database/":{"url":"other/database/","title":"database笔记","keywords":"","body":"Copyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:14:45 "},"other/database/mysql.html":{"url":"other/database/mysql.html","title":"mysql笔记","keywords":"","body":"databaseCopyright © neet11 2022 all right reserved，powered by GitbookLatest modification time: 2022-11-07 11:19:52 "}}